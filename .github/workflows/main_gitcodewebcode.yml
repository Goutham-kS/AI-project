name: Build and deploy ASP.Net Core app to Azure Web App - gitCodeWebCode

on:
  push:
    branches:
      # Workflow runs automatically when code is pushed to the 'main' branch
      - main
  workflow_dispatch:
    # Allows manual trigger of the workflow from the GitHub Actions UI

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read # Required to checkout the code

    steps:
      # 1. Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Explicitly pass the token to prevent authentication issues during checkout
          token: ${{ secrets.GITHUB_TOKEN }} 

      # 2. Setup .NET SDK
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          # Targets the .NET 9.0 runtime as configured in your Azure Web App
          dotnet-version: '9.x'

      # 3. Build the project
      - name: Build project
        run: dotnet build MyApi.csproj --configuration Release

      # 4. Publish project to a specific directory
      # This PowerShell script creates a clean publish directory and runs the publish command.
      - name: Publish project
        run: |
          $publishDir = "$PWD\publish\myapp"
          # Ensure directory is clean before publishing
          if (Test-Path $publishDir) { Remove-Item $publishDir -Recurse -Force }
          mkdir $publishDir
          dotnet publish MyApi.csproj --configuration Release --output $publishDir
          echo "Published to $publishDir"


      # 5. Upload published files as artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-app # Name of the artifact to be downloaded later
          path: publish\myapp # Path matches the output directory used in the Publish step

  deploy:
    runs-on: windows-latest
    needs: build # This job only runs if the 'build' job succeeds
    permissions:
      id-token: write # Required for secure Azure login (OIDC)
      contents: read

    steps:
      # 1. Download artifact from build job
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dotnet-app
          # Artifact contents (the published files) are placed directly in the workspace root (./)

      # 2. Login to Azure using the Service Principal secrets you configured
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_2E5B6DE1F0CB449A930BA1DB4ACCBB9F }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_12611FAE0C004686AC3899A91E69430C }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_6C95A165729F4E299D027031220DE959 }}

      
      # 3. Deploy to Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'gitCodeWebCode'
          slot-name: 'Production'
          # FIX: '.' correctly points to the directory containing the downloaded artifact
          package: . 
